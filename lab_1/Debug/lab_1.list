
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce4  08000ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce4  08000ce4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce4  08000ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000cf8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000039d6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001196  00000000  00000000  00023a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000016c9  00000000  00000000  00024ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000358  00000000  00000000  00026270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000568  00000000  00000000  000265c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000154f3  00000000  00000000  00026b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ef9  00000000  00000000  0003c023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079733  00000000  00000000  00040f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ba64f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000798  00000000  00000000  000ba6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000ca8 	.word	0x08000ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000ca8 	.word	0x08000ca8

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2224      	movs	r2, #36	; 0x24
 8000152:	2100      	movs	r1, #0
 8000154:	a807      	add	r0, sp, #28
 8000156:	f000 fd9f 	bl	8000c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800015a:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015c:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800015e:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000160:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000162:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000164:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000168:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800016c:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000170:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000174:	f000 fa96 	bl	80006a4 <HAL_RCC_OscConfig>
 8000178:	b108      	cbz	r0, 800017e <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800017a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800017c:	e7fe      	b.n	800017c <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800017e:	4601      	mov	r1, r0
 8000180:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000182:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000184:	e9cd 1102 	strd	r1, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000188:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800018c:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800018e:	f000 fcbf 	bl	8000b10 <HAL_RCC_ClockConfig>
 8000192:	b108      	cbz	r0, 8000198 <SystemClock_Config+0x4c>
 8000194:	b672      	cpsid	i
  while (1)
 8000196:	e7fe      	b.n	8000196 <SystemClock_Config+0x4a>
}
 8000198:	b010      	add	sp, #64	; 0x40
 800019a:	bd10      	pop	{r4, pc}

0800019c <main>:
{
 800019c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	2400      	movs	r4, #0
{
 80001a0:	b087      	sub	sp, #28
  HAL_Init();
 80001a2:	f000 f8e3 	bl	800036c <HAL_Init>
  SystemClock_Config();
 80001a6:	f7ff ffd1 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001aa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80001ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b2:	4b2b      	ldr	r3, [pc, #172]	; (8000260 <main+0xc4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin
 80001b4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b6:	6999      	ldr	r1, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ba:	f041 0104 	orr.w	r1, r1, #4
 80001be:	6199      	str	r1, [r3, #24]
 80001c0:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin
 80001c2:	f64f 71f0 	movw	r1, #65520	; 0xfff0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c6:	f000 0004 	and.w	r0, r0, #4
 80001ca:	9000      	str	r0, [sp, #0]
 80001cc:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ce:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin
 80001d0:	4824      	ldr	r0, [pc, #144]	; (8000264 <main+0xc8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001d2:	f045 0508 	orr.w	r5, r5, #8
 80001d6:	619d      	str	r5, [r3, #24]
 80001d8:	699b      	ldr	r3, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001da:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001dc:	f003 0308 	and.w	r3, r3, #8
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin
 80001e4:	f000 fa5a 	bl	800069c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80001e8:	4622      	mov	r2, r4
 80001ea:	217f      	movs	r1, #127	; 0x7f
 80001ec:	481e      	ldr	r0, [pc, #120]	; (8000268 <main+0xcc>)
 80001ee:	f000 fa55 	bl	800069c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_4|RED_LED_Pin|YELLOW_LED_Pin|GREEN_LED_Pin
 80001f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <main+0xc8>)
 80001f8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fe:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000200:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000202:	f000 f94b 	bl	800049c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000206:	237f      	movs	r3, #127	; 0x7f
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000208:	4817      	ldr	r0, [pc, #92]	; (8000268 <main+0xcc>)
 800020a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000210:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000214:	f000 f942 	bl	800049c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, led_red_state);		//	PA5
 8000218:	4622      	mov	r2, r4
 800021a:	2120      	movs	r1, #32
 800021c:	4811      	ldr	r0, [pc, #68]	; (8000264 <main+0xc8>)
 800021e:	f000 fa3d 	bl	800069c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, led_yellow_state);	//	PA6
 8000222:	462a      	mov	r2, r5
 8000224:	2140      	movs	r1, #64	; 0x40
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0xc8>)
	  counter = (counter+1) % 2;
 8000228:	462e      	mov	r6, r5
	  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, led_yellow_state);	//	PA6
 800022a:	f000 fa37 	bl	800069c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, led_red_state);		//	PA5
 800022e:	4f0d      	ldr	r7, [pc, #52]	; (8000264 <main+0xc8>)
	  HAL_Delay(1000);
 8000230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000234:	f000 f8be 	bl	80003b4 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, led_red_state);		//	PA5
 8000238:	4622      	mov	r2, r4
 800023a:	2120      	movs	r1, #32
 800023c:	4638      	mov	r0, r7
 800023e:	f000 fa2d 	bl	800069c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW_LED_GPIO_Port, YELLOW_LED_Pin, led_yellow_state);	//	PA6
 8000242:	462a      	mov	r2, r5
 8000244:	2140      	movs	r1, #64	; 0x40
 8000246:	4638      	mov	r0, r7
 8000248:	f000 fa28 	bl	800069c <HAL_GPIO_WritePin>
	  counter = (counter+1) % 2;
 800024c:	f086 0301 	eor.w	r3, r6, #1
 8000250:	b2de      	uxtb	r6, r3
	  if(counter == 0) {  //  change LEDs state every 2s
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1ec      	bne.n	8000230 <main+0x94>
		  led_red_state = ~led_red_state;
 8000256:	43e4      	mvns	r4, r4
		  led_yellow_state = ~led_yellow_state;
 8000258:	43ed      	mvns	r5, r5
		  led_red_state = ~led_red_state;
 800025a:	b2e4      	uxtb	r4, r4
		  led_yellow_state = ~led_yellow_state;
 800025c:	b2ed      	uxtb	r5, r5
 800025e:	e7e7      	b.n	8000230 <main+0x94>
 8000260:	40021000 	.word	0x40021000
 8000264:	40010800 	.word	0x40010800
 8000268:	40010c00 	.word	0x40010c00

0800026c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <HAL_MspInit+0x3c>)
{
 800026e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000270:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000272:	490e      	ldr	r1, [pc, #56]	; (80002ac <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000274:	f042 0201 	orr.w	r2, r2, #1
 8000278:	619a      	str	r2, [r3, #24]
 800027a:	699a      	ldr	r2, [r3, #24]
 800027c:	f002 0201 	and.w	r2, r2, #1
 8000280:	9200      	str	r2, [sp, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000284:	69da      	ldr	r2, [r3, #28]
 8000286:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800028a:	61da      	str	r2, [r3, #28]
 800028c:	69db      	ldr	r3, [r3, #28]
 800028e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000296:	684b      	ldr	r3, [r1, #4]
 8000298:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800029c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002a2:	b002      	add	sp, #8
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40010000 	.word	0x40010000

080002b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <NMI_Handler>
 80002b2:	bf00      	nop

080002b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b4:	e7fe      	b.n	80002b4 <HardFault_Handler>
 80002b6:	bf00      	nop

080002b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b8:	e7fe      	b.n	80002b8 <MemManage_Handler>
 80002ba:	bf00      	nop

080002bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002bc:	e7fe      	b.n	80002bc <BusFault_Handler>
 80002be:	bf00      	nop

080002c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c0:	e7fe      	b.n	80002c0 <UsageFault_Handler>
 80002c2:	bf00      	nop

080002c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop

080002c8 <DebugMon_Handler>:
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop

080002cc <PendSV_Handler>:
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d0:	f000 b85e 	b.w	8000390 <HAL_IncTick>

080002d4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopFillZerobss+0x22>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002fe:	f7ff ffe9 	bl	80002d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000302:	f000 fca5 	bl	8000c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff49 	bl	800019c <main>
  bx lr
 800030a:	4770      	bx	lr
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000314:	08000cec 	.word	0x08000cec
  ldr r2, =_sbss
 8000318:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800031c:	2000002c 	.word	0x2000002c

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000324:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800032a:	4a0d      	ldr	r2, [pc, #52]	; (8000360 <HAL_InitTick+0x3c>)
{
 800032c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800032e:	7811      	ldrb	r1, [r2, #0]
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <HAL_InitTick+0x40>)
 8000332:	fbb3 f3f1 	udiv	r3, r3, r1
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	fbb2 f0f3 	udiv	r0, r2, r3
 800033c:	f000 f896 	bl	800046c <HAL_SYSTICK_Config>
 8000340:	b908      	cbnz	r0, 8000346 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000342:	2d0f      	cmp	r5, #15
 8000344:	d901      	bls.n	800034a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000346:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000348:	bd38      	pop	{r3, r4, r5, pc}
 800034a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800034c:	4602      	mov	r2, r0
 800034e:	4629      	mov	r1, r5
 8000350:	f04f 30ff 	mov.w	r0, #4294967295
 8000354:	f000 f852 	bl	80003fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <HAL_InitTick+0x44>)
 800035a:	4620      	mov	r0, r4
 800035c:	601d      	str	r5, [r3, #0]
}
 800035e:	bd38      	pop	{r3, r4, r5, pc}
 8000360:	20000004 	.word	0x20000004
 8000364:	20000000 	.word	0x20000000
 8000368:	20000008 	.word	0x20000008

0800036c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800036c:	4a07      	ldr	r2, [pc, #28]	; (800038c <HAL_Init+0x20>)
{
 800036e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000370:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000372:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000374:	f043 0310 	orr.w	r3, r3, #16
 8000378:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800037a:	f000 f82d 	bl	80003d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800037e:	200f      	movs	r0, #15
 8000380:	f7ff ffd0 	bl	8000324 <HAL_InitTick>
  HAL_MspInit();
 8000384:	f7ff ff72 	bl	800026c <HAL_MspInit>
}
 8000388:	2000      	movs	r0, #0
 800038a:	bd08      	pop	{r3, pc}
 800038c:	40022000 	.word	0x40022000

08000390 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <HAL_IncTick+0x10>)
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <HAL_IncTick+0x14>)
 8000394:	6811      	ldr	r1, [r2, #0]
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	440b      	add	r3, r1
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	20000028 	.word	0x20000028
 80003a4:	20000004 	.word	0x20000004

080003a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003a8:	4b01      	ldr	r3, [pc, #4]	; (80003b0 <HAL_GetTick+0x8>)
 80003aa:	6818      	ldr	r0, [r3, #0]
}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	20000028 	.word	0x20000028

080003b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003b4:	b538      	push	{r3, r4, r5, lr}
 80003b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003b8:	f7ff fff6 	bl	80003a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003bc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80003be:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80003c0:	d002      	beq.n	80003c8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <HAL_Delay+0x20>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003c8:	f7ff ffee 	bl	80003a8 <HAL_GetTick>
 80003cc:	1b40      	subs	r0, r0, r5
 80003ce:	42a0      	cmp	r0, r4
 80003d0:	d3fa      	bcc.n	80003c8 <HAL_Delay+0x14>
  {
  }
}
 80003d2:	bd38      	pop	{r3, r4, r5, pc}
 80003d4:	20000004 	.word	0x20000004

080003d8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003d8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003dc:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003de:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003e0:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003e6:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003e8:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80003ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80003f2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000ed00 	.word	0xe000ed00

080003fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fe:	b430      	push	{r4, r5}
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000406:	f1c3 0507 	rsb	r5, r3, #7
 800040a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000410:	bf28      	it	cs
 8000412:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000414:	2c06      	cmp	r4, #6
 8000416:	d919      	bls.n	800044c <HAL_NVIC_SetPriority+0x50>
 8000418:	f04f 34ff 	mov.w	r4, #4294967295
 800041c:	3b03      	subs	r3, #3
 800041e:	409c      	lsls	r4, r3
 8000420:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000424:	f04f 34ff 	mov.w	r4, #4294967295
 8000428:	40ac      	lsls	r4, r5
 800042a:	ea21 0104 	bic.w	r1, r1, r4
 800042e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000430:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000432:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000436:	db0c      	blt.n	8000452 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000438:	0109      	lsls	r1, r1, #4
 800043a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800043e:	b2c9      	uxtb	r1, r1
 8000440:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000444:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000448:	bc30      	pop	{r4, r5}
 800044a:	4770      	bx	lr
 800044c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800044e:	4613      	mov	r3, r2
 8000450:	e7e8      	b.n	8000424 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <HAL_NVIC_SetPriority+0x6c>)
 8000454:	f000 000f 	and.w	r0, r0, #15
 8000458:	0109      	lsls	r1, r1, #4
 800045a:	b2c9      	uxtb	r1, r1
 800045c:	4403      	add	r3, r0
 800045e:	7619      	strb	r1, [r3, #24]
 8000460:	bc30      	pop	{r4, r5}
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00
 8000468:	e000ecfc 	.word	0xe000ecfc

0800046c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800046c:	3801      	subs	r0, #1
 800046e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000472:	d20d      	bcs.n	8000490 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000474:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000476:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047a:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047e:	4c06      	ldr	r4, [pc, #24]	; (8000498 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000480:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000482:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000486:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000488:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800048a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800048c:	6019      	str	r1, [r3, #0]
 800048e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000490:	2001      	movs	r0, #1
 8000492:	4770      	bx	lr
 8000494:	e000e010 	.word	0xe000e010
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800049c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004a0:	680c      	ldr	r4, [r1, #0]
{
 80004a2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004a4:	2c00      	cmp	r4, #0
 80004a6:	f000 809c 	beq.w	80005e2 <HAL_GPIO_Init+0x146>
  uint32_t config = 0x00u;
 80004aa:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80004ac:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 800068c <HAL_GPIO_Init+0x1f0>
  uint32_t position = 0x00u;
 80004b0:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004b2:	4f71      	ldr	r7, [pc, #452]	; (8000678 <HAL_GPIO_Init+0x1dc>)
      switch (GPIO_Init->Mode)
 80004b4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8000690 <HAL_GPIO_Init+0x1f4>
 80004b8:	f8df e1d8 	ldr.w	lr, [pc, #472]	; 8000694 <HAL_GPIO_Init+0x1f8>
 80004bc:	9000      	str	r0, [sp, #0]
 80004be:	e004      	b.n	80004ca <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 80004c0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004c2:	fa34 f203 	lsrs.w	r2, r4, r3
 80004c6:	f000 808c 	beq.w	80005e2 <HAL_GPIO_Init+0x146>
    ioposition = (0x01uL << position);
 80004ca:	2201      	movs	r2, #1
 80004cc:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 80004ce:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004d2:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 80004d6:	d1f3      	bne.n	80004c0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 80004d8:	684c      	ldr	r4, [r1, #4]
 80004da:	2c12      	cmp	r4, #18
 80004dc:	f200 8084 	bhi.w	80005e8 <HAL_GPIO_Init+0x14c>
 80004e0:	2c12      	cmp	r4, #18
 80004e2:	d80c      	bhi.n	80004fe <HAL_GPIO_Init+0x62>
 80004e4:	e8df f004 	tbb	[pc, r4]
 80004e8:	0ab9bc88 	.word	0x0ab9bc88
 80004ec:	0b0b0b0b 	.word	0x0b0b0b0b
 80004f0:	0b0b0b0b 	.word	0x0b0b0b0b
 80004f4:	0b0b0b0b 	.word	0x0b0b0b0b
 80004f8:	b60b      	.short	0xb60b
 80004fa:	b3          	.byte	0xb3
 80004fb:	00          	.byte	0x00
 80004fc:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	2dff      	cmp	r5, #255	; 0xff
 8000500:	f200 8081 	bhi.w	8000606 <HAL_GPIO_Init+0x16a>
 8000504:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000508:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800050c:	240f      	movs	r4, #15
 800050e:	f8d9 2000 	ldr.w	r2, [r9]
 8000512:	fa04 fb0a 	lsl.w	fp, r4, sl
 8000516:	ea22 020b 	bic.w	r2, r2, fp
 800051a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800051e:	ea42 020a 	orr.w	r2, r2, sl
 8000522:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000526:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800052a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800052e:	f000 808c 	beq.w	800064a <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	f8dc a018 	ldr.w	sl, [ip, #24]
 8000536:	f023 0203 	bic.w	r2, r3, #3
 800053a:	f04a 0a01 	orr.w	sl, sl, #1
 800053e:	f8cc a018 	str.w	sl, [ip, #24]
 8000542:	f8dc a018 	ldr.w	sl, [ip, #24]
 8000546:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800054a:	f00a 0a01 	and.w	sl, sl, #1
 800054e:	f8cd a00c 	str.w	sl, [sp, #12]
 8000552:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000556:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800055e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000562:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000566:	fa04 f40a 	lsl.w	r4, r4, sl
 800056a:	ea2b 0004 	bic.w	r0, fp, r4
 800056e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000570:	9c00      	ldr	r4, [sp, #0]
 8000572:	4842      	ldr	r0, [pc, #264]	; (800067c <HAL_GPIO_Init+0x1e0>)
 8000574:	4284      	cmp	r4, r0
 8000576:	d011      	beq.n	800059c <HAL_GPIO_Init+0x100>
 8000578:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800057c:	4284      	cmp	r4, r0
 800057e:	d071      	beq.n	8000664 <HAL_GPIO_Init+0x1c8>
 8000580:	483f      	ldr	r0, [pc, #252]	; (8000680 <HAL_GPIO_Init+0x1e4>)
 8000582:	9c00      	ldr	r4, [sp, #0]
 8000584:	4284      	cmp	r4, r0
 8000586:	bf0c      	ite	eq
 8000588:	f04f 0b02 	moveq.w	fp, #2
 800058c:	f04f 0b03 	movne.w	fp, #3
 8000590:	9801      	ldr	r0, [sp, #4]
 8000592:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000596:	ea40 000a 	orr.w	r0, r0, sl
 800059a:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 800059c:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800059e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 80005a2:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	bf14      	ite	ne
 80005a8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005aa:	43aa      	biceq	r2, r5
 80005ac:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80005ae:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005b0:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005b4:	bf14      	ite	ne
 80005b6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005b8:	43aa      	biceq	r2, r5
 80005ba:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80005bc:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005be:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80005c2:	bf14      	ite	ne
 80005c4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80005c6:	43aa      	biceq	r2, r5
 80005c8:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005ca:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80005ce:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005d0:	d038      	beq.n	8000644 <HAL_GPIO_Init+0x1a8>
          SET_BIT(EXTI->FTSR, iocurrent);
 80005d2:	4315      	orrs	r5, r2
 80005d4:	60fd      	str	r5, [r7, #12]
 80005d6:	680c      	ldr	r4, [r1, #0]
	position++;
 80005d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005da:	fa34 f203 	lsrs.w	r2, r4, r3
 80005de:	f47f af74 	bne.w	80004ca <HAL_GPIO_Init+0x2e>
  }
}
 80005e2:	b005      	add	sp, #20
 80005e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80005e8:	4544      	cmp	r4, r8
 80005ea:	d005      	beq.n	80005f8 <HAL_GPIO_Init+0x15c>
 80005ec:	d913      	bls.n	8000616 <HAL_GPIO_Init+0x17a>
 80005ee:	4574      	cmp	r4, lr
 80005f0:	d002      	beq.n	80005f8 <HAL_GPIO_Init+0x15c>
 80005f2:	4824      	ldr	r0, [pc, #144]	; (8000684 <HAL_GPIO_Init+0x1e8>)
 80005f4:	4284      	cmp	r4, r0
 80005f6:	d182      	bne.n	80004fe <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80005f8:	688c      	ldr	r4, [r1, #8]
 80005fa:	b9dc      	cbnz	r4, 8000634 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005fc:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005fe:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000602:	f67f af7f 	bls.w	8000504 <HAL_GPIO_Init+0x68>
 8000606:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000608:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800060c:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000610:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000614:	e77a      	b.n	800050c <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8000616:	481c      	ldr	r0, [pc, #112]	; (8000688 <HAL_GPIO_Init+0x1ec>)
 8000618:	4284      	cmp	r4, r0
 800061a:	d0ed      	beq.n	80005f8 <HAL_GPIO_Init+0x15c>
 800061c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000698 <HAL_GPIO_Init+0x1fc>
 8000620:	454c      	cmp	r4, r9
 8000622:	d0e9      	beq.n	80005f8 <HAL_GPIO_Init+0x15c>
 8000624:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000628:	454c      	cmp	r4, r9
 800062a:	f47f af68 	bne.w	80004fe <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800062e:	688c      	ldr	r4, [r1, #8]
 8000630:	2c00      	cmp	r4, #0
 8000632:	d0e3      	beq.n	80005fc <HAL_GPIO_Init+0x160>
            GPIOx->BSRR = ioposition;
 8000634:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000636:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000638:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 800063c:	bf0c      	ite	eq
 800063e:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8000640:	6142      	strne	r2, [r0, #20]
 8000642:	e75c      	b.n	80004fe <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000644:	ea22 0505 	bic.w	r5, r2, r5
 8000648:	60fd      	str	r5, [r7, #12]
 800064a:	680c      	ldr	r4, [r1, #0]
 800064c:	e738      	b.n	80004c0 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800064e:	68ce      	ldr	r6, [r1, #12]
 8000650:	360c      	adds	r6, #12
          break;
 8000652:	e754      	b.n	80004fe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000654:	68ce      	ldr	r6, [r1, #12]
 8000656:	3604      	adds	r6, #4
          break;
 8000658:	e751      	b.n	80004fe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800065a:	68ce      	ldr	r6, [r1, #12]
 800065c:	3608      	adds	r6, #8
          break;
 800065e:	e74e      	b.n	80004fe <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000660:	68ce      	ldr	r6, [r1, #12]
          break;
 8000662:	e74c      	b.n	80004fe <HAL_GPIO_Init+0x62>
 8000664:	f04f 0b01 	mov.w	fp, #1
 8000668:	9801      	ldr	r0, [sp, #4]
 800066a:	fa0b fa0a 	lsl.w	sl, fp, sl
 800066e:	ea40 000a 	orr.w	r0, r0, sl
 8000672:	9001      	str	r0, [sp, #4]
 8000674:	e792      	b.n	800059c <HAL_GPIO_Init+0x100>
 8000676:	bf00      	nop
 8000678:	40010400 	.word	0x40010400
 800067c:	40010800 	.word	0x40010800
 8000680:	40011000 	.word	0x40011000
 8000684:	10320000 	.word	0x10320000
 8000688:	10120000 	.word	0x10120000
 800068c:	40021000 	.word	0x40021000
 8000690:	10220000 	.word	0x10220000
 8000694:	10310000 	.word	0x10310000
 8000698:	10210000 	.word	0x10210000

0800069c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800069c:	b902      	cbnz	r2, 80006a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800069e:	0409      	lsls	r1, r1, #16
 80006a0:	6101      	str	r1, [r0, #16]
  }
}
 80006a2:	4770      	bx	lr

080006a4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80006a4:	2800      	cmp	r0, #0
 80006a6:	f000 81c3 	beq.w	8000a30 <HAL_RCC_OscConfig+0x38c>
{
 80006aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ae:	6803      	ldr	r3, [r0, #0]
 80006b0:	4604      	mov	r4, r0
 80006b2:	07dd      	lsls	r5, r3, #31
{
 80006b4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006b6:	d535      	bpl.n	8000724 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80006b8:	49a6      	ldr	r1, [pc, #664]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80006ba:	684a      	ldr	r2, [r1, #4]
 80006bc:	f002 020c 	and.w	r2, r2, #12
 80006c0:	2a04      	cmp	r2, #4
 80006c2:	f000 80ef 	beq.w	80008a4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006c6:	684a      	ldr	r2, [r1, #4]
 80006c8:	f002 020c 	and.w	r2, r2, #12
 80006cc:	2a08      	cmp	r2, #8
 80006ce:	f000 80e5 	beq.w	800089c <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d2:	6863      	ldr	r3, [r4, #4]
 80006d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006d8:	d010      	beq.n	80006fc <HAL_RCC_OscConfig+0x58>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f000 810d 	beq.w	80008fa <HAL_RCC_OscConfig+0x256>
 80006e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80006e4:	f000 818f 	beq.w	8000a06 <HAL_RCC_OscConfig+0x362>
 80006e8:	4b9a      	ldr	r3, [pc, #616]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e004      	b.n	8000706 <HAL_RCC_OscConfig+0x62>
 80006fc:	4a95      	ldr	r2, [pc, #596]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80006fe:	6813      	ldr	r3, [r2, #0]
 8000700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000704:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000706:	f7ff fe4f 	bl	80003a8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800070a:	4e92      	ldr	r6, [pc, #584]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800070c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800070e:	e005      	b.n	800071c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000710:	f7ff fe4a 	bl	80003a8 <HAL_GetTick>
 8000714:	1b40      	subs	r0, r0, r5
 8000716:	2864      	cmp	r0, #100	; 0x64
 8000718:	f200 80eb 	bhi.w	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800071c:	6833      	ldr	r3, [r6, #0]
 800071e:	039a      	lsls	r2, r3, #14
 8000720:	d5f6      	bpl.n	8000710 <HAL_RCC_OscConfig+0x6c>
 8000722:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000724:	079f      	lsls	r7, r3, #30
 8000726:	d528      	bpl.n	800077a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000728:	4a8a      	ldr	r2, [pc, #552]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 800072a:	6851      	ldr	r1, [r2, #4]
 800072c:	f011 0f0c 	tst.w	r1, #12
 8000730:	f000 808e 	beq.w	8000850 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000734:	6851      	ldr	r1, [r2, #4]
 8000736:	f001 010c 	and.w	r1, r1, #12
 800073a:	2908      	cmp	r1, #8
 800073c:	f000 8084 	beq.w	8000848 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000740:	6923      	ldr	r3, [r4, #16]
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 8125 	beq.w	8000992 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000748:	2201      	movs	r2, #1
 800074a:	4b83      	ldr	r3, [pc, #524]	; (8000958 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800074c:	4e81      	ldr	r6, [pc, #516]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800074e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000750:	f7ff fe2a 	bl	80003a8 <HAL_GetTick>
 8000754:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000756:	e005      	b.n	8000764 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000758:	f7ff fe26 	bl	80003a8 <HAL_GetTick>
 800075c:	1b40      	subs	r0, r0, r5
 800075e:	2802      	cmp	r0, #2
 8000760:	f200 80c7 	bhi.w	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000764:	6833      	ldr	r3, [r6, #0]
 8000766:	0798      	lsls	r0, r3, #30
 8000768:	d5f6      	bpl.n	8000758 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800076a:	6833      	ldr	r3, [r6, #0]
 800076c:	6962      	ldr	r2, [r4, #20]
 800076e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000772:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000776:	6033      	str	r3, [r6, #0]
 8000778:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800077a:	071a      	lsls	r2, r3, #28
 800077c:	d41f      	bmi.n	80007be <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800077e:	075d      	lsls	r5, r3, #29
 8000780:	d541      	bpl.n	8000806 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000782:	4b74      	ldr	r3, [pc, #464]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 8000784:	69da      	ldr	r2, [r3, #28]
 8000786:	00d0      	lsls	r0, r2, #3
 8000788:	d57d      	bpl.n	8000886 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800078a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800078c:	4b73      	ldr	r3, [pc, #460]	; (800095c <HAL_RCC_OscConfig+0x2b8>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	05d1      	lsls	r1, r2, #23
 8000792:	f140 809d 	bpl.w	80008d0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000796:	68e3      	ldr	r3, [r4, #12]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f000 810b 	beq.w	80009b4 <HAL_RCC_OscConfig+0x310>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 80c5 	beq.w	800092e <HAL_RCC_OscConfig+0x28a>
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80007a8:	6a1a      	ldr	r2, [r3, #32]
 80007aa:	f000 8139 	beq.w	8000a20 <HAL_RCC_OscConfig+0x37c>
 80007ae:	f022 0201 	bic.w	r2, r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	f022 0204 	bic.w	r2, r2, #4
 80007ba:	621a      	str	r2, [r3, #32]
 80007bc:	e0ff      	b.n	80009be <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007be:	69a3      	ldr	r3, [r4, #24]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d050      	beq.n	8000866 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 80007c4:	2201      	movs	r2, #1
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007c8:	4e62      	ldr	r6, [pc, #392]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 80007ca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007cc:	f7ff fdec 	bl	80003a8 <HAL_GetTick>
 80007d0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007d2:	e005      	b.n	80007e0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007d4:	f7ff fde8 	bl	80003a8 <HAL_GetTick>
 80007d8:	1b40      	subs	r0, r0, r5
 80007da:	2802      	cmp	r0, #2
 80007dc:	f200 8089 	bhi.w	80008f2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80007e2:	079b      	lsls	r3, r3, #30
 80007e4:	d5f6      	bpl.n	80007d4 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80007e6:	4b5f      	ldr	r3, [pc, #380]	; (8000964 <HAL_RCC_OscConfig+0x2c0>)
 80007e8:	4a5f      	ldr	r2, [pc, #380]	; (8000968 <HAL_RCC_OscConfig+0x2c4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	fba2 2303 	umull	r2, r3, r2, r3
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80007f4:	bf00      	nop
  }
  while (Delay --);
 80007f6:	9b01      	ldr	r3, [sp, #4]
 80007f8:	1e5a      	subs	r2, r3, #1
 80007fa:	9201      	str	r2, [sp, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1f9      	bne.n	80007f4 <HAL_RCC_OscConfig+0x150>
 8000800:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000802:	075d      	lsls	r5, r3, #29
 8000804:	d4bd      	bmi.n	8000782 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000806:	69e0      	ldr	r0, [r4, #28]
 8000808:	b1d0      	cbz	r0, 8000840 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800080a:	4d52      	ldr	r5, [pc, #328]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 800080c:	686a      	ldr	r2, [r5, #4]
 800080e:	f002 020c 	and.w	r2, r2, #12
 8000812:	2a08      	cmp	r2, #8
 8000814:	f000 80e6 	beq.w	80009e4 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000818:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800081a:	f04f 0100 	mov.w	r1, #0
 800081e:	4a53      	ldr	r2, [pc, #332]	; (800096c <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000820:	f000 8108 	beq.w	8000a34 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8000824:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000826:	f7ff fdbf 	bl	80003a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800082c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082e:	e004      	b.n	800083a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000830:	f7ff fdba 	bl	80003a8 <HAL_GetTick>
 8000834:	1b40      	subs	r0, r0, r5
 8000836:	2802      	cmp	r0, #2
 8000838:	d85b      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	019b      	lsls	r3, r3, #6
 800083e:	d4f7      	bmi.n	8000830 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8000840:	2000      	movs	r0, #0
}
 8000842:	b002      	add	sp, #8
 8000844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000848:	6852      	ldr	r2, [r2, #4]
 800084a:	03d6      	lsls	r6, r2, #15
 800084c:	f53f af78 	bmi.w	8000740 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000850:	4a40      	ldr	r2, [pc, #256]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	0795      	lsls	r5, r2, #30
 8000856:	d52f      	bpl.n	80008b8 <HAL_RCC_OscConfig+0x214>
 8000858:	6922      	ldr	r2, [r4, #16]
 800085a:	2a01      	cmp	r2, #1
 800085c:	d02c      	beq.n	80008b8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800085e:	2001      	movs	r0, #1
}
 8000860:	b002      	add	sp, #8
 8000862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8000866:	4a3e      	ldr	r2, [pc, #248]	; (8000960 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000868:	4e3a      	ldr	r6, [pc, #232]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800086a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800086c:	f7ff fd9c 	bl	80003a8 <HAL_GetTick>
 8000870:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000872:	e004      	b.n	800087e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000874:	f7ff fd98 	bl	80003a8 <HAL_GetTick>
 8000878:	1b40      	subs	r0, r0, r5
 800087a:	2802      	cmp	r0, #2
 800087c:	d839      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800087e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000880:	079f      	lsls	r7, r3, #30
 8000882:	d4f7      	bmi.n	8000874 <HAL_RCC_OscConfig+0x1d0>
 8000884:	e7bc      	b.n	8000800 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8000888:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800088e:	61da      	str	r2, [r3, #28]
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800089a:	e777      	b.n	800078c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800089c:	684a      	ldr	r2, [r1, #4]
 800089e:	03d0      	lsls	r0, r2, #15
 80008a0:	f57f af17 	bpl.w	80006d2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a4:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80008a6:	6812      	ldr	r2, [r2, #0]
 80008a8:	0391      	lsls	r1, r2, #14
 80008aa:	f57f af3b 	bpl.w	8000724 <HAL_RCC_OscConfig+0x80>
 80008ae:	6862      	ldr	r2, [r4, #4]
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	f47f af37 	bne.w	8000724 <HAL_RCC_OscConfig+0x80>
 80008b6:	e7d2      	b.n	800085e <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008b8:	4926      	ldr	r1, [pc, #152]	; (8000954 <HAL_RCC_OscConfig+0x2b0>)
 80008ba:	6960      	ldr	r0, [r4, #20]
 80008bc:	680a      	ldr	r2, [r1, #0]
 80008be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008c2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80008c6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008c8:	071a      	lsls	r2, r3, #28
 80008ca:	f57f af58 	bpl.w	800077e <HAL_RCC_OscConfig+0xda>
 80008ce:	e776      	b.n	80007be <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d0:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008d2:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80008da:	f7ff fd65 	bl	80003a8 <HAL_GetTick>
 80008de:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	05da      	lsls	r2, r3, #23
 80008e4:	f53f af57 	bmi.w	8000796 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008e8:	f7ff fd5e 	bl	80003a8 <HAL_GetTick>
 80008ec:	1b80      	subs	r0, r0, r6
 80008ee:	2864      	cmp	r0, #100	; 0x64
 80008f0:	d9f6      	bls.n	80008e0 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 80008f2:	2003      	movs	r0, #3
}
 80008f4:	b002      	add	sp, #8
 80008f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000902:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000904:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000912:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000914:	f7ff fd48 	bl	80003a8 <HAL_GetTick>
 8000918:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091a:	e004      	b.n	8000926 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800091c:	f7ff fd44 	bl	80003a8 <HAL_GetTick>
 8000920:	1b40      	subs	r0, r0, r5
 8000922:	2864      	cmp	r0, #100	; 0x64
 8000924:	d8e5      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000926:	6833      	ldr	r3, [r6, #0]
 8000928:	039b      	lsls	r3, r3, #14
 800092a:	d4f7      	bmi.n	800091c <HAL_RCC_OscConfig+0x278>
 800092c:	e6f9      	b.n	8000722 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800092e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000932:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000936:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000938:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800093a:	f022 0201 	bic.w	r2, r2, #1
 800093e:	621a      	str	r2, [r3, #32]
 8000940:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000942:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000946:	f022 0204 	bic.w	r2, r2, #4
 800094a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800094c:	f7ff fd2c 	bl	80003a8 <HAL_GetTick>
 8000950:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000952:	e012      	b.n	800097a <HAL_RCC_OscConfig+0x2d6>
 8000954:	40021000 	.word	0x40021000
 8000958:	42420000 	.word	0x42420000
 800095c:	40007000 	.word	0x40007000
 8000960:	42420480 	.word	0x42420480
 8000964:	20000000 	.word	0x20000000
 8000968:	10624dd3 	.word	0x10624dd3
 800096c:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000970:	f7ff fd1a 	bl	80003a8 <HAL_GetTick>
 8000974:	1b80      	subs	r0, r0, r6
 8000976:	4540      	cmp	r0, r8
 8000978:	d8bb      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800097a:	6a3b      	ldr	r3, [r7, #32]
 800097c:	0798      	lsls	r0, r3, #30
 800097e:	d4f7      	bmi.n	8000970 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8000980:	2d00      	cmp	r5, #0
 8000982:	f43f af40 	beq.w	8000806 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <HAL_RCC_OscConfig+0x3f4>)
 8000988:	69d3      	ldr	r3, [r2, #28]
 800098a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800098e:	61d3      	str	r3, [r2, #28]
 8000990:	e739      	b.n	8000806 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000992:	4a42      	ldr	r2, [pc, #264]	; (8000a9c <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000994:	4e40      	ldr	r6, [pc, #256]	; (8000a98 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8000996:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fd06 	bl	80003a8 <HAL_GetTick>
 800099c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	e004      	b.n	80009aa <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009a0:	f7ff fd02 	bl	80003a8 <HAL_GetTick>
 80009a4:	1b40      	subs	r0, r0, r5
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d8a3      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009aa:	6833      	ldr	r3, [r6, #0]
 80009ac:	0799      	lsls	r1, r3, #30
 80009ae:	d4f7      	bmi.n	80009a0 <HAL_RCC_OscConfig+0x2fc>
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	e6e2      	b.n	800077a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009b4:	4a38      	ldr	r2, [pc, #224]	; (8000a98 <HAL_RCC_OscConfig+0x3f4>)
 80009b6:	6a13      	ldr	r3, [r2, #32]
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80009be:	f7ff fcf3 	bl	80003a8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009c6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009c8:	4f33      	ldr	r7, [pc, #204]	; (8000a98 <HAL_RCC_OscConfig+0x3f4>)
 80009ca:	e004      	b.n	80009d6 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009cc:	f7ff fcec 	bl	80003a8 <HAL_GetTick>
 80009d0:	1b80      	subs	r0, r0, r6
 80009d2:	4540      	cmp	r0, r8
 80009d4:	d88d      	bhi.n	80008f2 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	079b      	lsls	r3, r3, #30
 80009da:	d5f7      	bpl.n	80009cc <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 80009dc:	2d00      	cmp	r5, #0
 80009de:	f43f af12 	beq.w	8000806 <HAL_RCC_OscConfig+0x162>
 80009e2:	e7d0      	b.n	8000986 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80009e4:	2801      	cmp	r0, #1
 80009e6:	f43f af2c 	beq.w	8000842 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 80009ea:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80009ec:	6a22      	ldr	r2, [r4, #32]
 80009ee:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80009f2:	4291      	cmp	r1, r2
 80009f4:	f47f af33 	bne.w	800085e <HAL_RCC_OscConfig+0x1ba>
 80009f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80009fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80009fe:	1a18      	subs	r0, r3, r0
 8000a00:	bf18      	it	ne
 8000a02:	2001      	movne	r0, #1
 8000a04:	e71d      	b.n	8000842 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a0a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e672      	b.n	8000706 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a20:	f042 0204 	orr.w	r2, r2, #4
 8000a24:	621a      	str	r2, [r3, #32]
 8000a26:	6a1a      	ldr	r2, [r3, #32]
 8000a28:	f042 0201 	orr.w	r2, r2, #1
 8000a2c:	621a      	str	r2, [r3, #32]
 8000a2e:	e7c6      	b.n	80009be <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8000a30:	2001      	movs	r0, #1
}
 8000a32:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8000a34:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8000a36:	f7ff fcb7 	bl	80003a8 <HAL_GetTick>
 8000a3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a3c:	e005      	b.n	8000a4a <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a3e:	f7ff fcb3 	bl	80003a8 <HAL_GetTick>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	2802      	cmp	r0, #2
 8000a46:	f63f af54 	bhi.w	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	0199      	lsls	r1, r3, #6
 8000a4e:	d4f6      	bmi.n	8000a3e <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000a50:	6a23      	ldr	r3, [r4, #32]
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a56:	d105      	bne.n	8000a64 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a58:	686a      	ldr	r2, [r5, #4]
 8000a5a:	68a1      	ldr	r1, [r4, #8]
 8000a5c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000a60:	430a      	orrs	r2, r1
 8000a62:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a64:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a66:	4d0c      	ldr	r5, [pc, #48]	; (8000a98 <HAL_RCC_OscConfig+0x3f4>)
 8000a68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a6a:	686a      	ldr	r2, [r5, #4]
 8000a6c:	430b      	orrs	r3, r1
 8000a6e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8000a72:	490b      	ldr	r1, [pc, #44]	; (8000aa0 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a74:	4313      	orrs	r3, r2
 8000a76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a78:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8000a7a:	f7ff fc95 	bl	80003a8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a7e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000a80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a82:	e005      	b.n	8000a90 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000a84:	f7ff fc90 	bl	80003a8 <HAL_GetTick>
 8000a88:	1b40      	subs	r0, r0, r5
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	f63f af31 	bhi.w	80008f2 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	019a      	lsls	r2, r3, #6
 8000a94:	d5f6      	bpl.n	8000a84 <HAL_RCC_OscConfig+0x3e0>
 8000a96:	e6d3      	b.n	8000840 <HAL_RCC_OscConfig+0x19c>
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	42420000 	.word	0x42420000
 8000aa0:	42420060 	.word	0x42420060

08000aa4 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000aa4:	f240 2201 	movw	r2, #513	; 0x201
{
 8000aa8:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000aac:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ab0:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ab6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x60>)
 8000abc:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000abe:	f003 010c 	and.w	r1, r3, #12
 8000ac2:	2908      	cmp	r1, #8
 8000ac4:	d002      	beq.n	8000acc <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8000ac8:	b006      	add	sp, #24
 8000aca:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000acc:	f3c3 4183 	ubfx	r1, r3, #18, #4
 8000ad0:	4461      	add	r1, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ad2:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ad4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ad8:	d50c      	bpl.n	8000af4 <HAL_RCC_GetSysClockFreq+0x50>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ada:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000adc:	480a      	ldr	r0, [pc, #40]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ade:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ae2:	fb00 f001 	mul.w	r0, r0, r1
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ae6:	4463      	add	r3, ip
 8000ae8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000aec:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000af0:	b006      	add	sp, #24
 8000af2:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x68>)
 8000af6:	fb00 f001 	mul.w	r0, r0, r1
}
 8000afa:	b006      	add	sp, #24
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	08000cd0 	.word	0x08000cd0
 8000b04:	40021000 	.word	0x40021000
 8000b08:	007a1200 	.word	0x007a1200
 8000b0c:	003d0900 	.word	0x003d0900

08000b10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8000b10:	2800      	cmp	r0, #0
 8000b12:	f000 808c 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b16:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <HAL_RCC_ClockConfig+0x12c>)
{
 8000b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	428b      	cmp	r3, r1
 8000b26:	460d      	mov	r5, r1
 8000b28:	d20c      	bcs.n	8000b44 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b2a:	6813      	ldr	r3, [r2, #0]
 8000b2c:	f023 0307 	bic.w	r3, r3, #7
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b34:	6813      	ldr	r3, [r2, #0]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d002      	beq.n	8000b44 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8000b3e:	2001      	movs	r0, #1
}
 8000b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	0798      	lsls	r0, r3, #30
 8000b48:	d514      	bpl.n	8000b74 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b4a:	0759      	lsls	r1, r3, #29
 8000b4c:	d504      	bpl.n	8000b58 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b4e:	493c      	ldr	r1, [pc, #240]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000b50:	684a      	ldr	r2, [r1, #4]
 8000b52:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000b56:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b58:	071a      	lsls	r2, r3, #28
 8000b5a:	d504      	bpl.n	8000b66 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b5c:	4938      	ldr	r1, [pc, #224]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000b5e:	684a      	ldr	r2, [r1, #4]
 8000b60:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8000b64:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b66:	4936      	ldr	r1, [pc, #216]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000b68:	68a0      	ldr	r0, [r4, #8]
 8000b6a:	684a      	ldr	r2, [r1, #4]
 8000b6c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000b70:	4302      	orrs	r2, r0
 8000b72:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b74:	07df      	lsls	r7, r3, #31
 8000b76:	d520      	bpl.n	8000bba <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b78:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7a:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b7c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b80:	d057      	beq.n	8000c32 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b82:	2a02      	cmp	r2, #2
 8000b84:	d050      	beq.n	8000c28 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b86:	0799      	lsls	r1, r3, #30
 8000b88:	d5d9      	bpl.n	8000b3e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b8a:	4e2d      	ldr	r6, [pc, #180]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b8c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b90:	6873      	ldr	r3, [r6, #4]
 8000b92:	f023 0303 	bic.w	r3, r3, #3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000b9a:	f7ff fc05 	bl	80003a8 <HAL_GetTick>
 8000b9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ba0:	e004      	b.n	8000bac <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ba2:	f7ff fc01 	bl	80003a8 <HAL_GetTick>
 8000ba6:	1bc0      	subs	r0, r0, r7
 8000ba8:	4540      	cmp	r0, r8
 8000baa:	d845      	bhi.n	8000c38 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bac:	6873      	ldr	r3, [r6, #4]
 8000bae:	6862      	ldr	r2, [r4, #4]
 8000bb0:	f003 030c 	and.w	r3, r3, #12
 8000bb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bb8:	d1f3      	bne.n	8000ba2 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000bba:	4a20      	ldr	r2, [pc, #128]	; (8000c3c <HAL_RCC_ClockConfig+0x12c>)
 8000bbc:	6813      	ldr	r3, [r2, #0]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	42ab      	cmp	r3, r5
 8000bc4:	d909      	bls.n	8000bda <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc6:	6813      	ldr	r3, [r2, #0]
 8000bc8:	f023 0307 	bic.w	r3, r3, #7
 8000bcc:	432b      	orrs	r3, r5
 8000bce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bd0:	6813      	ldr	r3, [r2, #0]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	42ab      	cmp	r3, r5
 8000bd8:	d1b1      	bne.n	8000b3e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	075a      	lsls	r2, r3, #29
 8000bde:	d506      	bpl.n	8000bee <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000be0:	4917      	ldr	r1, [pc, #92]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000be2:	68e0      	ldr	r0, [r4, #12]
 8000be4:	684a      	ldr	r2, [r1, #4]
 8000be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000bea:	4302      	orrs	r2, r0
 8000bec:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bee:	071b      	lsls	r3, r3, #28
 8000bf0:	d507      	bpl.n	8000c02 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000bf4:	6921      	ldr	r1, [r4, #16]
 8000bf6:	6853      	ldr	r3, [r2, #4]
 8000bf8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000bfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c00:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c02:	f7ff ff4f 	bl	8000aa4 <HAL_RCC_GetSysClockFreq>
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_RCC_ClockConfig+0x130>)
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_RCC_ClockConfig+0x134>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8000c0c:	490e      	ldr	r1, [pc, #56]	; (8000c48 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_RCC_ClockConfig+0x13c>)
 8000c16:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 8000c1a:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c1c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8000c1e:	f7ff fb81 	bl	8000324 <HAL_InitTick>
  return HAL_OK;
 8000c22:	2000      	movs	r0, #0
}
 8000c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c28:	0198      	lsls	r0, r3, #6
 8000c2a:	d4ae      	bmi.n	8000b8a <HAL_RCC_ClockConfig+0x7a>
 8000c2c:	e787      	b.n	8000b3e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
}
 8000c30:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c32:	039e      	lsls	r6, r3, #14
 8000c34:	d4a9      	bmi.n	8000b8a <HAL_RCC_ClockConfig+0x7a>
 8000c36:	e782      	b.n	8000b3e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8000c38:	2003      	movs	r0, #3
 8000c3a:	e781      	b.n	8000b40 <HAL_RCC_ClockConfig+0x30>
 8000c3c:	40022000 	.word	0x40022000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	08000cc0 	.word	0x08000cc0
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000000 	.word	0x20000000

08000c50 <__libc_init_array>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	2600      	movs	r6, #0
 8000c54:	4d0c      	ldr	r5, [pc, #48]	; (8000c88 <__libc_init_array+0x38>)
 8000c56:	4c0d      	ldr	r4, [pc, #52]	; (8000c8c <__libc_init_array+0x3c>)
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	42a6      	cmp	r6, r4
 8000c5e:	d109      	bne.n	8000c74 <__libc_init_array+0x24>
 8000c60:	f000 f822 	bl	8000ca8 <_init>
 8000c64:	2600      	movs	r6, #0
 8000c66:	4d0a      	ldr	r5, [pc, #40]	; (8000c90 <__libc_init_array+0x40>)
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <__libc_init_array+0x44>)
 8000c6a:	1b64      	subs	r4, r4, r5
 8000c6c:	10a4      	asrs	r4, r4, #2
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d105      	bne.n	8000c7e <__libc_init_array+0x2e>
 8000c72:	bd70      	pop	{r4, r5, r6, pc}
 8000c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c78:	4798      	blx	r3
 8000c7a:	3601      	adds	r6, #1
 8000c7c:	e7ee      	b.n	8000c5c <__libc_init_array+0xc>
 8000c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c82:	4798      	blx	r3
 8000c84:	3601      	adds	r6, #1
 8000c86:	e7f2      	b.n	8000c6e <__libc_init_array+0x1e>
 8000c88:	08000ce4 	.word	0x08000ce4
 8000c8c:	08000ce4 	.word	0x08000ce4
 8000c90:	08000ce4 	.word	0x08000ce4
 8000c94:	08000ce8 	.word	0x08000ce8

08000c98 <memset>:
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4402      	add	r2, r0
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d100      	bne.n	8000ca2 <memset+0xa>
 8000ca0:	4770      	bx	lr
 8000ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ca6:	e7f9      	b.n	8000c9c <memset+0x4>

08000ca8 <_init>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr

08000cb4 <_fini>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr
